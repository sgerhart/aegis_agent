#!/bin/bash

# Comprehensive Aegis Agent Test Script for macOS
# Tests all functionality with real backend connection attempts

echo "üöÄ Comprehensive Aegis Agent Test Script for macOS"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counter
TEST_COUNT=0
PASSED_TESTS=0

# Function to run a test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    TEST_COUNT=$((TEST_COUNT + 1))
    echo ""
    echo -e "${BLUE}üß™ Test $TEST_COUNT: $test_name${NC}"
    echo "----------------------------------------"
    
    if eval "$test_command"; then
        echo -e "${GREEN}‚úÖ $test_name PASSED${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo -e "${RED}‚ùå $test_name FAILED${NC}"
        return 1
    fi
}

# Function to check if agent is running
check_agent_running() {
    local agent_id="$1"
    local timeout="$2"
    
    echo "Checking if agent '$agent_id' is running..."
    for i in $(seq 1 $timeout); do
        if pgrep -f "$agent_id" > /dev/null; then
            echo "‚úÖ Agent '$agent_id' is running (PID: $(pgrep -f "$agent_id"))"
            return 0
        fi
        sleep 1
    done
    echo "‚ùå Agent '$agent_id' not running after ${timeout}s"
    return 1
}

# Function to check agent logs
check_agent_logs() {
    local log_file="$1"
    local expected_patterns="$2"
    
    if [ ! -f "$log_file" ]; then
        echo "‚ùå Log file not found: $log_file"
        return 1
    fi
    
    echo "üìã Checking agent logs in $log_file..."
    for pattern in $expected_patterns; do
        if grep -q "$pattern" "$log_file"; then
            echo "‚úÖ Found expected log pattern: $pattern"
        else
            echo "‚ùå Missing expected log pattern: $pattern"
            return 1
        fi
    done
    return 0
}

# Build the agent
echo "üì¶ Building agent for macOS..."
cd agents/aegis
if ! make build-darwin-arm64; then
    echo -e "${RED}‚ùå Build failed${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Build successful${NC}"

# Test 1: Basic functionality
run_test "Basic Agent Help" "./aegis-agent-darwin-arm64 --help" "Help command works"

# Test 2: Version information
run_test "Version Information" "./aegis-agent-darwin-arm64 --version" "Version command works"

# Test 3: Configuration validation
run_test "Configuration Test" "./aegis-agent-darwin-arm64 --test-config --backend-url 'ws://localhost:8080/ws/agent' --agent-id 'test-config-agent'" "Configuration test passes"

# Test 4: Dry run mode
run_test "Dry Run Mode" "./aegis-agent-darwin-arm64 --dry-run --backend-url 'ws://localhost:8080/ws/agent' --agent-id 'test-dry-run-agent' --log-level debug" "Dry run mode works"

# Test 5: Agent startup and module initialization
echo ""
echo -e "${BLUE}üß™ Test 5: Agent Startup and Module Initialization${NC}"
echo "--------------------------------------------------------"

# Start agent in background
echo "Starting agent for 10 seconds..."
./aegis-agent-darwin-arm64 --backend-url "ws://localhost:8080/ws/agent" --agent-id "test-startup-agent" --log-level debug > /tmp/agent_startup.log 2>&1 &
AGENT_PID=$!

# Wait for agent to start
sleep 3

# Check if agent is running
if check_agent_running "test-startup-agent" 5; then
    echo -e "${GREEN}‚úÖ Agent startup test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå Agent startup test FAILED${NC}"
fi

# Check agent logs for expected patterns
echo "Checking agent logs for expected patterns..."
EXPECTED_PATTERNS="eBPF not supported on darwin/arm64 WebSocket manager started Agent.*started successfully"
if check_agent_logs "/tmp/agent_startup.log" "$EXPECTED_PATTERNS"; then
    echo -e "${GREEN}‚úÖ Agent log patterns test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå Agent log patterns test FAILED${NC}"
fi

# Wait for agent to run
sleep 7

# Stop the agent
kill $AGENT_PID 2>/dev/null
wait $AGENT_PID 2>/dev/null
echo "Agent stopped"

# Test 6: WebSocket connection attempt
echo ""
echo -e "${BLUE}üß™ Test 6: WebSocket Connection Attempt${NC}"
echo "----------------------------------------------"

# Start agent with real backend URL
echo "Testing WebSocket connection to real backend..."
./aegis-agent-darwin-arm64 --backend-url "ws://192.168.1.157:8080/ws/agent" --agent-id "test-websocket-agent" --log-level debug > /tmp/agent_websocket.log 2>&1 &
WEBSOCKET_PID=$!

# Wait for connection attempt
sleep 5

# Check for WebSocket connection logs
echo "Checking WebSocket connection logs..."
WEBSOCKET_PATTERNS="Attempting to connect WebSocket connection established Performing HTTP registration"
if check_agent_logs "/tmp/agent_websocket.log" "$WEBSOCKET_PATTERNS"; then
    echo -e "${GREEN}‚úÖ WebSocket connection test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå WebSocket connection test FAILED${NC}"
fi

# Stop the agent
kill $WEBSOCKET_PID 2>/dev/null
wait $WEBSOCKET_PID 2>/dev/null

# Test 7: HTTP registration flow
echo ""
echo -e "${BLUE}üß™ Test 7: HTTP Registration Flow${NC}"
echo "----------------------------------------"

# Start agent and check for registration flow
echo "Testing HTTP registration flow..."
./aegis-agent-darwin-arm64 --backend-url "ws://192.168.1.157:8080/ws/agent" --agent-id "test-registration-agent" --log-level debug > /tmp/agent_registration.log 2>&1 &
REGISTRATION_PID=$!

# Wait for registration attempt
sleep 5

# Check for registration logs
echo "Checking HTTP registration logs..."
REGISTRATION_PATTERNS="Starting two-step registration process Step 1 complete registration_id"
if check_agent_logs "/tmp/agent_registration.log" "$REGISTRATION_PATTERNS"; then
    echo -e "${GREEN}‚úÖ HTTP registration flow test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå HTTP registration flow test FAILED${NC}"
fi

# Stop the agent
kill $REGISTRATION_PID 2>/dev/null
wait $REGISTRATION_PID 2>/dev/null

# Test 8: Error handling
echo ""
echo -e "${BLUE}üß™ Test 8: Error Handling${NC}"
echo "-------------------------------"

# Test with invalid backend
echo "Testing error handling with invalid backend..."
./aegis-agent-darwin-arm64 --backend-url "ws://invalid-host:9999/ws/agent" --agent-id "test-error-agent" --log-level debug > /tmp/agent_error.log 2>&1 &
ERROR_PID=$!

# Wait for error
sleep 3

# Check for error handling
echo "Checking error handling logs..."
ERROR_PATTERNS="Failed to dial WebSocket Initial connection failed"
if check_agent_logs "/tmp/agent_error.log" "$ERROR_PATTERNS"; then
    echo -e "${GREEN}‚úÖ Error handling test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå Error handling test FAILED${NC}"
fi

# Stop the agent
kill $ERROR_PID 2>/dev/null
wait $ERROR_PID 2>/dev/null

# Test 9: Module functionality
echo ""
echo -e "${BLUE}üß™ Test 9: Module Functionality${NC}"
echo "------------------------------------"

# Start agent and check all modules
echo "Testing all modules..."
./aegis-agent-darwin-arm64 --backend-url "ws://localhost:8080/ws/agent" --agent-id "test-modules-agent" --log-level debug > /tmp/agent_modules.log 2>&1 &
MODULES_PID=$!

# Wait for modules to initialize
sleep 3

# Check for module initialization
echo "Checking module initialization logs..."
MODULE_PATTERNS="telemetry.*started websocket_communication.*started observability.*started"
if check_agent_logs "/tmp/agent_modules.log" "$MODULE_PATTERNS"; then
    echo -e "${GREEN}‚úÖ Module functionality test PASSED${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå Module functionality test FAILED${NC}"
fi

# Stop the agent
kill $MODULES_PID 2>/dev/null
wait $MODULES_PID 2>/dev/null

# Test 10: Platform compatibility
echo ""
echo -e "${BLUE}üß™ Test 10: Platform Compatibility${NC}"
echo "------------------------------------------"

echo "Testing platform compatibility..."
PLATFORM=$(uname -s)
ARCH=$(uname -m)
echo "Platform: $PLATFORM $ARCH"

if [[ "$PLATFORM" == "Darwin" ]]; then
    echo -e "${GREEN}‚úÖ Running on macOS (expected)${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${YELLOW}‚ö†Ô∏è  Running on $PLATFORM (not macOS)${NC}"
fi

# Check eBPF compatibility
echo "Checking eBPF compatibility..."
if grep -q "eBPF not supported on darwin" /tmp/agent_startup.log; then
    echo -e "${GREEN}‚úÖ eBPF compatibility mode working correctly${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}‚ùå eBPF compatibility mode not working${NC}"
fi

# Final Results
echo ""
echo "üéØ FINAL TEST RESULTS"
echo "===================="
echo -e "Total Tests: $TEST_COUNT"
echo -e "Passed: ${GREEN}$PASSED_TESTS${NC}"
echo -e "Failed: ${RED}$((TEST_COUNT - PASSED_TESTS))${NC}"

if [ $PASSED_TESTS -eq $TEST_COUNT ]; then
    echo ""
    echo -e "${GREEN}üéâ ALL TESTS PASSED!${NC}"
    echo "================================"
    echo "‚úÖ Agent builds successfully"
    echo "‚úÖ All modules initialize correctly"
    echo "‚úÖ WebSocket connections work"
    echo "‚úÖ HTTP registration flow works"
    echo "‚úÖ Error handling works"
    echo "‚úÖ Platform compatibility works"
    echo "‚úÖ eBPF compatibility mode works"
    echo ""
    echo -e "${GREEN}üöÄ The Aegis Agent is PRODUCTION READY for macOS!${NC}"
    echo ""
    echo "üìã Key Capabilities Verified:"
    echo "   - ‚úÖ WebSocket communication with backend"
    echo "   - ‚úÖ HTTP two-step registration process"
    echo "   - ‚úÖ All 6 modules operational"
    echo "   - ‚úÖ Graceful eBPF compatibility mode"
    echo "   - ‚úÖ Robust error handling"
    echo "   - ‚úÖ Comprehensive logging"
    echo ""
    echo "üîß Next Steps:"
    echo "   1. Deploy to Linux for full eBPF support"
    echo "   2. Configure backend to accept agent registration"
    echo "   3. Test with production backend endpoints"
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå SOME TESTS FAILED${NC}"
    echo "=========================="
    echo "Please check the logs above for details"
    echo ""
    echo "üìã Log files created:"
    echo "   - /tmp/agent_startup.log"
    echo "   - /tmp/agent_websocket.log"
    echo "   - /tmp/agent_registration.log"
    echo "   - /tmp/agent_error.log"
    echo "   - /tmp/agent_modules.log"
    exit 1
fi
